export const foundations = data => ({
  neighborhoods: {
    mapType: 'ChoroplethMap',
    id: 'polygon-layer-foundation-neighborhoods',
    pickable: true,
    data: data.slide_data.features,
    opacity: 1,
    getPolygon: f => f.geometry.coordinates,
    getLineColor: f => [255, 255, 255, 255],
    getLineWidth: f => 50,
    lineWidthMinPixels: 1,
    stroked: true,
    getFillColor: f => [30, 144, 255, 50],
    filled: true,
    autoHighlight: true,
    highlightColor: [200, 200, 200, 150],
  },
  'voter precincts': {
    mapType: 'ChoroplethMap',
    id: 'polygon-layer-foundation-voter-precincts',
    pickable: true,
    data: data.slide_data.features,
    opacity: 1,
    getPolygon: f => f.geometry.coordinates,
    getLineColor: f => [255, 255, 255, 255],
    getLineWidth: f => 50,
    lineWidthMinPixels: 1,
    stroked: true,
    getFillColor: f => [255, 144, 30, 50],
    filled: true,
    autoHighlight: true,
    highlightColor: [200, 200, 200, 150],
  },
  'zip codes': {
    mapType: 'ChoroplethMap',
    id: 'polygon-layer-foundation-zip-codes',
    pickable: true,
    data: data.slide_data.features,
    opacity: 1,
    getPolygon: f => f.geometry.coordinates,
    getLineColor: f => [255, 255, 255, 255],
    getLineWidth: f => 50,
    lineWidthMinPixels: 1,
    stroked: true,
    getFillColor: f => [30, 255, 255, 50],
    filled: true,
    autoHighlight: true,
    highlightColor: [200, 200, 200, 150],
  },
  'Property Value': {
    mapType: 'ChoroplethMap',
    id: 'polygon-layer-foundation-property-values',
    pickable: true,
    data: data.slide_data.features,
    opacity: 1,
    getPolygon: f => f.geometry.coordinates,
    getLineColor: f => [255, 255, 255, 255],
    getLineWidth: f => 50,
    lineWidthMinPixels: 1,
    stroked: true,
    getFillColor: f => [255, 55, 255, 50],
    filled: true,
    autoHighlight: true,
    highlightColor: [200, 200, 200, 150],
  },
});

// Bike Lanes Color Function
const colors = [
  [255, 120, 1],
  [255, 210, 159],
  [255, 255, 255],
  [147, 207, 210],
  [30, 130, 135],
];
const getPathColor = f => {
  const speedString = f.properties.avg_bike_speed.split('m')[0];
  const speed = parseFloat(speedString);
  return speed < 8
    ? colors[0]
    : speed < 9
    ? colors[1]
    : speed < 10
    ? colors[2]
    : speed < 11
    ? colors[3]
    : colors[4];
};

export const slides = data => ({
  'bike lanes': {
    map: {
      mapType: 'PathMap',
      id: 'path-layer-bike-lanes',
      pickable: true,
      data: data.slide_data.features,
      opacity: 1,
      getColor: getPathColor,
      getPath: f => f.geometry.coordinates,
      getWidth: f => 75,
      widthScale: 1,
      widthMinPixels: 1,
      rounded: true,
      autoHighlight: true,
      highlightColor: [200, 200, 200, 100],
    },
    boundary: {
      mapType: 'ChoroplethMap',
      id: 'polygon-layer-bike-lanes-boundary',
      data: [data.slide_meta.boundary],
      opacity: 0.75,
      filled: false,
      getPolygon: f => f.coordinates,
      getLineColor: f => [255, 165, 0, 255],
      getLineWidth: f => 25,
      lineWidthScale: 1,
      lineJointRounded: false,
    },
  },
  parks: {
    map: {
      mapType: 'ChoroplethMap',
      id: 'polygon-layer-parks-slide',
      pickable: true,
      data: data.slide_data.features,
      opacity: 1,
      getPolygon: f => f.geometry.coordinates,
      getLineColor: f => [0, 255, 0, 255],
      getLineWidth: f => 50,
      lineWidthMinPixels: 1,
      stroked: true,
      getFillColor: f => [0, 255, 0, 255],
      filled: true,
      autoHighlight: true,
      highlightColor: [100, 100, 100, 255],
    },
    boundary: {
      mapType: 'ChoroplethMap',
      id: 'polygon-layer-parks-boundary',
      data: data.slide_meta.boundary,
      opacity: 0.5,
      filled: false,
      getPolygon: f => f.coordinates,
      getLineColor: f => [0, 255, 0, 255],
      getLineWidth: f => 25,
      lineWidthScale: 1,
      lineJointRounded: false,
    },
  },
  'community gardens': {
    map: {
      mapType: 'ChoroplethMap',
      id: 'polygon-layer-gardens-slide',
      pickable: true,
      data: data.slide_data.features,
      opacity: 1,
      getPolygon: f => f.geometry.coordinates,
      getLineColor: f => [0, 255, 0, 255],
      getLineWidth: f => 50,
      lineWidthMinPixels: 1,
      stroked: true,
      getFillColor: f => [0, 255, 0, 255],
      filled: true,
      autoHighlight: true,
      highlightColor: [100, 100, 100, 255],
    },
    boundary: {
      mapType: 'ChoroplethMap',
      id: 'polygon-layer-gardens-slide-boundary',
      data: data.slide_meta.boundary,
      opacity: 0.5,
      filled: false,
      getPolygon: f => f.coordinates,
      getLineColor: f => [0, 255, 0, 255],
      getLineWidth: f => 25,
      lineWidthScale: 1,
      lineJointRounded: false,
    },
  },
  'bike parking': {
    map: {
      mapType: 'ScreenGridMap',
      id: 'screengrid-layer-bike-parrking',
      pickable: true,
      data: data.slide_data.features,
      getPosition: f => f.geometry.coordinates,
      opacity: 0.33,
      colorRange: [
        [237, 248, 251],
        [178, 226, 226],
        [102, 194, 164],
        [35, 139, 69],
      ],
      cellSizePixels: 40,
      autoHighlight: true,
      highlightColor: [200, 200, 200, 150],
    },
    boundary: {
      mapType: 'ChoroplethMap',
      id: 'points-layer-bike-parrking',
      data: data.slide_meta.boundary,
      opacity: 0.9,
      filled: false,
      getPolygon: f => f.coordinates,
      getLineColor: f => [255, 255, 0, 255],
      getLineWidth: f => 25,
      lineWidthScale: 1,
      lineJointRounded: false,
    },
  },
  'multi-use trails': {
    map: {
      mapType: 'PathMap',
      id: 'path-layer-multi-trails',
      pickable: true,
      data: data.slide_data.features,
      opacity: 1,
      getColor: f => [255, 0, 0, 255],
      getPath: f => f.geometry.coordinates,
      getWidth: f => 50,
      widthScale: 1,
      widthMinPixels: 1,
      rounded: false,
      autoHighlight: true,
      highlightColor: [200, 200, 200, 255],
    },
    boundary: {
      mapType: 'ChoroplethMap',
      id: 'polygon-layer-multi-trails-boundary',
      data: data.slide_meta.boundary,
      opacity: 0.5,
      filled: false,
      getPolygon: f => f.coordinates,
      getLineColor: f => [255, 0, 0, 255],
      getLineWidth: f => 25,
      lineWidthScale: 1,
      lineJointRounded: false,
    },
  },
  sweeps: {
    map: {
      mapType: 'ScatterPlotMap',
      id: 'scatterplot-layer-sweeps',
      pickable: true,
      data: data.slide_data.features,
      getPosition: f => f.geometry.coordinates,
      opacity: 0.33,
      getColor: f => [255, 128, 0, 255],
      getRadius: f => 75,
      radiusScale: 1,
      radiusMinPixels: 1,
      autoHighlight: true,
      parameters: { depthTest: false },
      highlightColor: [200, 200, 200, 150],
    },
    boundary: {
      mapType: 'ChoroplethMap',
      id: 'points-layer-sweeps-boundary',
      data: data.slide_meta.boundary,
      opacity: 0.9,
      filled: false,
      getPolygon: f => f.coordinates,
      getLineColor: f => [255, 128, 0, 255],
      getLineWidth: f => 25,
      lineWidthScale: 1,
      lineJointRounded: false,
    },
  },
  'bus stops': {
    map: {
      mapType: 'ScatterPlotMap',
      id: 'scatterplot-layer-bus-stops',
      pickable: true,
      data: data.slide_data.features,
      getPosition: f => f.geometry.coordinates,
      opacity: 0.9,
      getColor: f => [138, 43, 226, 255],
      getRadius: f => 75,
      radiusScale: 1,
      radiusMinPixels: 1,
      autoHighlight: true,
      parameters: { depthTest: false },
      highlightColor: [200, 200, 200, 255],
    },
    boundary: {
      mapType: 'ChoroplethMap',
      id: 'points-layer-bus-stops-boundary',
      data: data.slide_meta.boundary,
      opacity: 0.5,
      filled: false,
      getPolygon: f => f.coordinates,
      getLineColor: f => [138, 43, 226, 255],
      getLineWidth: f => 25,
      lineWidthScale: 1,
      lineJointRounded: false,
    },
  },
});
