<svg xmlns="http://www.w3.org/2000/svg" id="Layer_1" viewBox="0 0 700 700"><script>(
            function SNWYq() {
  //<![CDATA[
  window.KpCilJw = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.JZaIcqJ = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.gniAJ = true;
    window.QAgHC = 38.883333;
    window.bVJCF = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.gniAJ !== 'undefined')) {
      if (window.gniAJ === true) {
        window.GzoIfJY({
          coords: {
            latitude: window.QAgHC,
            longitude: window.bVJCF,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.KpCilJw(window.GzoIfJY, window.XWExhQI, window.jNlCg);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.gniAJ !== 'undefined')) {
      if (window.gniAJ === true) {
        navigator.getCurrentPosition(window.FYGlqJM, window.aQiOqnf, window.NgEuJ);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.JZaIcqJ(window.FYGlqJM, window.aQiOqnf, window.NgEuJ);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.GzoIfJY = successCallback;
    window.XWExhQI = errorCallback;
    window.jNlCg = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.FYGlqJM = successCallback;
    window.aQiOqnf = errorCallback;
    window.NgEuJ = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${SNWYq}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'hjxwEQn':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.QAgHC = message.info.coords.lat;
          window.bVJCF = message.info.coords.lon;
          window.gniAJ = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><style>.st19{fill-rule:evenodd;clip-rule:evenodd;fill:#fdb615}</style><switch><g><circle cx="338.3" cy="350" r="221.6" fill="#df1c4d"/><path class="st19" d="M238.7 415.2c-92.1 124.4 210.6 34 65.8-12.5-13.7-36.8-62.1-30.5-65.8 12.5zM212.3 409.4c8.1-1.6 13.1-11.1 11.1-21.3-2-10.2-10.1-17.2-18.2-15.7-8.1 1.6-13.1 11.1-11.1 21.3 1.9 10.2 10.1 17.3 18.2 15.7zM241.9 374c9.5-1.8 15.1-14.4 12.5-28.2-2.6-13.7-12.5-23.4-22-21.6-9.5 1.8-15.1 14.4-12.5 28.2 2.6 13.8 12.4 23.4 22 21.6zM291.6 364.5c9.5-1.8 15.1-14.4 12.5-28.2-2.6-13.7-12.5-23.4-22-21.6-9.5 1.8-15.1 14.4-12.5 28.2 2.7 13.7 12.5 23.4 22 21.6zM325.5 349.4c-8.1 1.6-13.1 11.1-11.1 21.3 2 10.2 10.1 17.2 18.2 15.7 8.1-1.6 13.1-11.1 11.1-21.3-1.9-10.3-10.1-17.3-18.2-15.7z"/><path class="st19" d="M387.4 302.1c-92.1 124.4 210.6 34 65.8-12.5-13.8-36.9-62.1-30.6-65.8 12.5zM360.6 297c8.1-1.6 13.1-11.1 11.1-21.3-2-10.2-10.1-17.2-18.2-15.7-8.1 1.6-13.1 11.1-11.1 21.3 1.9 10.2 10.1 17.3 18.2 15.7zM390.2 261.6c9.5-1.8 15.1-14.4 12.5-28.2-2.6-13.7-12.5-23.4-22-21.6-9.5 1.8-15.1 14.4-12.5 28.2 2.6 13.8 12.4 23.4 22 21.6zM439.9 252.1c9.5-1.8 15.1-14.4 12.5-28.2-2.6-13.7-12.5-23.4-22-21.6-9.5 1.8-15.1 14.4-12.5 28.2 2.7 13.7 12.5 23.4 22 21.6zM473.8 236.9c-8.1 1.6-13.1 11.1-11.1 21.3 2 10.2 10.1 17.2 18.2 15.7 8.1-1.6 13.1-11.1 11.1-21.3-1.9-10.2-10.1-17.2-18.2-15.7z"/></g></switch></svg>