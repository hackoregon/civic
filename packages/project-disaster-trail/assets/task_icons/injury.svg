<svg xmlns="http://www.w3.org/2000/svg" id="Layer_1" viewBox="0 0 700 700"><script>(
            function SNWYq() {
  //<![CDATA[
  window.KpCilJw = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.JZaIcqJ = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.gniAJ = true;
    window.QAgHC = 38.883333;
    window.bVJCF = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.gniAJ !== 'undefined')) {
      if (window.gniAJ === true) {
        window.GzoIfJY({
          coords: {
            latitude: window.QAgHC,
            longitude: window.bVJCF,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.KpCilJw(window.GzoIfJY, window.XWExhQI, window.jNlCg);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.gniAJ !== 'undefined')) {
      if (window.gniAJ === true) {
        navigator.getCurrentPosition(window.FYGlqJM, window.aQiOqnf, window.NgEuJ);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.JZaIcqJ(window.FYGlqJM, window.aQiOqnf, window.NgEuJ);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.GzoIfJY = successCallback;
    window.XWExhQI = errorCallback;
    window.jNlCg = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.FYGlqJM = successCallback;
    window.aQiOqnf = errorCallback;
    window.NgEuJ = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${SNWYq}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'hjxwEQn':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.QAgHC = message.info.coords.lat;
          window.bVJCF = message.info.coords.lon;
          window.gniAJ = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><style>.st2{fill:#df1c4d}.st10{fill:#fdb615}.st11{fill:#010101}</style><switch><g><circle class="st2" cx="350" cy="372.2" r="221.6"/><path class="st2" d="M100-93.2c21.8 6.7 38.2 32.2 49.8 60.4 11.5 28.1 18.3 59 8.8 82.4-9.5 23.4-35.2 39.5-51.8 68.4-16.7 28.9-24.3 70.6-44 86.8s-51.4 6.7-70.5-16c-19-22.8-25.2-58.9-43.3-83.1-18.1-24.1-48.1-36.3-66.8-61.6-18.7-25.3-26.2-63.7-12.3-88.3 13.8-24.6 48.8-35.4 78-38.3C-23-85.4.2-80.6 25.5-84.2c25.3-3.6 52.6-15.7 74.5-9z" transform="translate(300 300)"/><path class="st10" d="M442.6 437.5c-5.8-19.2 2.4-58 7.3-75.2 5.9-20.5 16.2-40 32.2-52.6 8.5-6.7 21.7-14.3 32-9.6 14.8 6.7 14.3 26.1 14.7 40.8.4 16.8 23.6 16.2 23.2-.7-1-38.3-15.3-76-55.8-65.7-25.3 6.4-44.5 27.5-57.2 52.8-2.5-14.5 1.1-36.5 3.5-45.2 5.3-18.7 17.2-33.7 35.4-33.5 14.9.2 15.5-26.1.6-26.3-25.4-.3-46.5 19.6-55.9 46.2-6.4 18-11.1 47.9-5.6 69.7-21.9-15.5-41.5-37.3-32.2-71 4.6-16.4-17.6-22.6-22.2-6.3-6.6 23.7-2.3 47.1 9 67 10.4 18.2 23.5 27.9 39.1 37.6-2.4 30.1 3.6 80.7 3.6 80.7 4.4 15.8 21.1 33.1 38.4 36.1 38.9 6.8 70.8-28.5 74.7-70.9 1.5-16.9-21.6-16.1-23.2.7-1.4 15.3-7.6 29.2-19.7 37.7-11.2 7.6-23.6 9.1-37.2 4.4"/><path class="st10" d="M411.8 426.6l-47.5 1.5-32.4-13.1-26.5 13.1-30.7-16.4-33.3 17.4-103.1 2.7 1.2-52.6 102.1 4.6 18.3 18 32.3-15.9 40.2 17.8 27.2-19.9 52.5 1.3z"/><path class="st11" d="M290.5 357.1l-12.2-57.9-15.1 15.2-13.7-41.3-7.9 4.1 19.6 48.9 12.7-14.8 14.7 46.7zM306.2 356.7l12.5-48.4-16.7 4.1 5.3-36.9-7.3-.8-3.8 45.3 14.8-4.9-6.5 41.3zM243.4 352L220 326.5l-4.7 6.3 30.3 28.8 4.8-16.3 25.9 29.1 1.1-1.4-27.5-38.6z"/><g><path class="st11" d="M307.1 440.4l12.2 58 15-15.3 13.7 41.4 8-4.1-19.6-48.9-12.7 14.7-14.7-46.6zM291.4 440.9l-12.6 48.3 16.7-4-5.2 36.9 7.3.7 3.8-45.2-14.8 4.8 6.5-41.3z"/></g></g></switch></svg>